
14-Segment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002844  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002970  08002970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002984  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000827c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166f  00000000  00000000  000282b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00029920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a15  00000000  00000000  0002ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c3b  00000000  00000000  0004155d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008471f  00000000  00000000  0004b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf8b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002688  00000000  00000000  000cf908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002938 	.word	0x08002938

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002938 	.word	0x08002938

0800014c <segchar>:
#include "led.h"
uint8_t R1=0, R2=0, R3=0, R4=0;
//==============================
void segchar (uint8_t seg)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	switch(seg)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b5a      	cmp	r3, #90	; 0x5a
 800015a:	f200 8526 	bhi.w	8000baa <segchar+0xa5e>
 800015e:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <segchar+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	08000825 	.word	0x08000825
 8000168:	080002d1 	.word	0x080002d1
 800016c:	08000369 	.word	0x08000369
 8000170:	080003ff 	.word	0x080003ff
 8000174:	08000495 	.word	0x08000495
 8000178:	0800052b 	.word	0x0800052b
 800017c:	080005cd 	.word	0x080005cd
 8000180:	08000663 	.word	0x08000663
 8000184:	080006f9 	.word	0x080006f9
 8000188:	0800078f 	.word	0x0800078f
 800018c:	08000bab 	.word	0x08000bab
 8000190:	08000bab 	.word	0x08000bab
 8000194:	08000bab 	.word	0x08000bab
 8000198:	08000bab 	.word	0x08000bab
 800019c:	08000bab 	.word	0x08000bab
 80001a0:	08000bab 	.word	0x08000bab
 80001a4:	08000bab 	.word	0x08000bab
 80001a8:	08000bab 	.word	0x08000bab
 80001ac:	08000bab 	.word	0x08000bab
 80001b0:	08000bab 	.word	0x08000bab
 80001b4:	08000bab 	.word	0x08000bab
 80001b8:	08000bab 	.word	0x08000bab
 80001bc:	08000bab 	.word	0x08000bab
 80001c0:	08000bab 	.word	0x08000bab
 80001c4:	08000bab 	.word	0x08000bab
 80001c8:	08000bab 	.word	0x08000bab
 80001cc:	08000bab 	.word	0x08000bab
 80001d0:	08000bab 	.word	0x08000bab
 80001d4:	08000bab 	.word	0x08000bab
 80001d8:	08000bab 	.word	0x08000bab
 80001dc:	08000bab 	.word	0x08000bab
 80001e0:	08000bab 	.word	0x08000bab
 80001e4:	08000bab 	.word	0x08000bab
 80001e8:	08000bab 	.word	0x08000bab
 80001ec:	08000bab 	.word	0x08000bab
 80001f0:	08000bab 	.word	0x08000bab
 80001f4:	08000bab 	.word	0x08000bab
 80001f8:	08000bab 	.word	0x08000bab
 80001fc:	08000bab 	.word	0x08000bab
 8000200:	08000bab 	.word	0x08000bab
 8000204:	08000bab 	.word	0x08000bab
 8000208:	08000bab 	.word	0x08000bab
 800020c:	08000bab 	.word	0x08000bab
 8000210:	08000bab 	.word	0x08000bab
 8000214:	08000bab 	.word	0x08000bab
 8000218:	08000bab 	.word	0x08000bab
 800021c:	08000bab 	.word	0x08000bab
 8000220:	08000bab 	.word	0x08000bab
 8000224:	08000bab 	.word	0x08000bab
 8000228:	08000bab 	.word	0x08000bab
 800022c:	08000bab 	.word	0x08000bab
 8000230:	08000bab 	.word	0x08000bab
 8000234:	08000bab 	.word	0x08000bab
 8000238:	08000bab 	.word	0x08000bab
 800023c:	08000bab 	.word	0x08000bab
 8000240:	08000bab 	.word	0x08000bab
 8000244:	08000bab 	.word	0x08000bab
 8000248:	08000bab 	.word	0x08000bab
 800024c:	08000bab 	.word	0x08000bab
 8000250:	08000bab 	.word	0x08000bab
 8000254:	08000bab 	.word	0x08000bab
 8000258:	08000bab 	.word	0x08000bab
 800025c:	08000bab 	.word	0x08000bab
 8000260:	08000bab 	.word	0x08000bab
 8000264:	08000bab 	.word	0x08000bab
 8000268:	0800095f 	.word	0x0800095f
 800026c:	08000bab 	.word	0x08000bab
 8000270:	08000bab 	.word	0x08000bab
 8000274:	08000bab 	.word	0x08000bab
 8000278:	08000bab 	.word	0x08000bab
 800027c:	08000bab 	.word	0x08000bab
 8000280:	08000bab 	.word	0x08000bab
 8000284:	080009f5 	.word	0x080009f5
 8000288:	08000bab 	.word	0x08000bab
 800028c:	08000bab 	.word	0x08000bab
 8000290:	08000bab 	.word	0x08000bab
 8000294:	08000bab 	.word	0x08000bab
 8000298:	08000bab 	.word	0x08000bab
 800029c:	08000bab 	.word	0x08000bab
 80002a0:	08000a8b 	.word	0x08000a8b
 80002a4:	080008c9 	.word	0x080008c9
 80002a8:	08000bab 	.word	0x08000bab
 80002ac:	08000bab 	.word	0x08000bab
 80002b0:	08000bab 	.word	0x08000bab
 80002b4:	08000bab 	.word	0x08000bab
 80002b8:	08000bab 	.word	0x08000bab
 80002bc:	08000bab 	.word	0x08000bab
 80002c0:	08000bab 	.word	0x08000bab
 80002c4:	08000bab 	.word	0x08000bab
 80002c8:	08000bab 	.word	0x08000bab
 80002cc:	08000b15 	.word	0x08000b15
	{
		case 1:
			SA_RESET;SB_SET;SC_SET;SD_RESET;SE_RESET;SF_RESET;SG_RESET;SG2_RESET;SH_RESET;SJ_RESET;SK_SET;SL_RESET;SM_RESET;SN_RESET;
 80002d0:	2200      	movs	r2, #0
 80002d2:	2104      	movs	r1, #4
 80002d4:	48ba      	ldr	r0, [pc, #744]	; (80005c0 <segchar+0x474>)
 80002d6:	f001 fa79 	bl	80017cc <HAL_GPIO_WritePin>
 80002da:	2201      	movs	r2, #1
 80002dc:	2102      	movs	r1, #2
 80002de:	48b8      	ldr	r0, [pc, #736]	; (80005c0 <segchar+0x474>)
 80002e0:	f001 fa74 	bl	80017cc <HAL_GPIO_WritePin>
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ea:	48b6      	ldr	r0, [pc, #728]	; (80005c4 <segchar+0x478>)
 80002ec:	f001 fa6e 	bl	80017cc <HAL_GPIO_WritePin>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2102      	movs	r1, #2
 80002f4:	48b3      	ldr	r0, [pc, #716]	; (80005c4 <segchar+0x478>)
 80002f6:	f001 fa69 	bl	80017cc <HAL_GPIO_WritePin>
 80002fa:	2200      	movs	r2, #0
 80002fc:	2101      	movs	r1, #1
 80002fe:	48b0      	ldr	r0, [pc, #704]	; (80005c0 <segchar+0x474>)
 8000300:	f001 fa64 	bl	80017cc <HAL_GPIO_WritePin>
 8000304:	2200      	movs	r2, #0
 8000306:	2180      	movs	r1, #128	; 0x80
 8000308:	48ad      	ldr	r0, [pc, #692]	; (80005c0 <segchar+0x474>)
 800030a:	f001 fa5f 	bl	80017cc <HAL_GPIO_WritePin>
 800030e:	2200      	movs	r2, #0
 8000310:	2108      	movs	r1, #8
 8000312:	48ab      	ldr	r0, [pc, #684]	; (80005c0 <segchar+0x474>)
 8000314:	f001 fa5a 	bl	80017cc <HAL_GPIO_WritePin>
 8000318:	2200      	movs	r2, #0
 800031a:	2101      	movs	r1, #1
 800031c:	48a9      	ldr	r0, [pc, #676]	; (80005c4 <segchar+0x478>)
 800031e:	f001 fa55 	bl	80017cc <HAL_GPIO_WritePin>
 8000322:	2200      	movs	r2, #0
 8000324:	2140      	movs	r1, #64	; 0x40
 8000326:	48a6      	ldr	r0, [pc, #664]	; (80005c0 <segchar+0x474>)
 8000328:	f001 fa50 	bl	80017cc <HAL_GPIO_WritePin>
 800032c:	2200      	movs	r2, #0
 800032e:	2120      	movs	r1, #32
 8000330:	48a3      	ldr	r0, [pc, #652]	; (80005c0 <segchar+0x474>)
 8000332:	f001 fa4b 	bl	80017cc <HAL_GPIO_WritePin>
 8000336:	2201      	movs	r2, #1
 8000338:	2110      	movs	r1, #16
 800033a:	48a1      	ldr	r0, [pc, #644]	; (80005c0 <segchar+0x474>)
 800033c:	f001 fa46 	bl	80017cc <HAL_GPIO_WritePin>
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000346:	48a0      	ldr	r0, [pc, #640]	; (80005c8 <segchar+0x47c>)
 8000348:	f001 fa40 	bl	80017cc <HAL_GPIO_WritePin>
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000352:	489d      	ldr	r0, [pc, #628]	; (80005c8 <segchar+0x47c>)
 8000354:	f001 fa3a 	bl	80017cc <HAL_GPIO_WritePin>
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	489a      	ldr	r0, [pc, #616]	; (80005c8 <segchar+0x47c>)
 8000360:	f001 fa34 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000364:	f000 bc21 	b.w	8000baa <segchar+0xa5e>
		case 2:
			SA_SET;SB_SET;SC_RESET;SD_SET;SE_SET;SF_RESET;SG_SET;SG2_SET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 8000368:	2201      	movs	r2, #1
 800036a:	2104      	movs	r1, #4
 800036c:	4894      	ldr	r0, [pc, #592]	; (80005c0 <segchar+0x474>)
 800036e:	f001 fa2d 	bl	80017cc <HAL_GPIO_WritePin>
 8000372:	2201      	movs	r2, #1
 8000374:	2102      	movs	r1, #2
 8000376:	4892      	ldr	r0, [pc, #584]	; (80005c0 <segchar+0x474>)
 8000378:	f001 fa28 	bl	80017cc <HAL_GPIO_WritePin>
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000382:	4890      	ldr	r0, [pc, #576]	; (80005c4 <segchar+0x478>)
 8000384:	f001 fa22 	bl	80017cc <HAL_GPIO_WritePin>
 8000388:	2201      	movs	r2, #1
 800038a:	2102      	movs	r1, #2
 800038c:	488d      	ldr	r0, [pc, #564]	; (80005c4 <segchar+0x478>)
 800038e:	f001 fa1d 	bl	80017cc <HAL_GPIO_WritePin>
 8000392:	2201      	movs	r2, #1
 8000394:	2101      	movs	r1, #1
 8000396:	488a      	ldr	r0, [pc, #552]	; (80005c0 <segchar+0x474>)
 8000398:	f001 fa18 	bl	80017cc <HAL_GPIO_WritePin>
 800039c:	2200      	movs	r2, #0
 800039e:	2180      	movs	r1, #128	; 0x80
 80003a0:	4887      	ldr	r0, [pc, #540]	; (80005c0 <segchar+0x474>)
 80003a2:	f001 fa13 	bl	80017cc <HAL_GPIO_WritePin>
 80003a6:	2201      	movs	r2, #1
 80003a8:	2108      	movs	r1, #8
 80003aa:	4885      	ldr	r0, [pc, #532]	; (80005c0 <segchar+0x474>)
 80003ac:	f001 fa0e 	bl	80017cc <HAL_GPIO_WritePin>
 80003b0:	2201      	movs	r2, #1
 80003b2:	2101      	movs	r1, #1
 80003b4:	4883      	ldr	r0, [pc, #524]	; (80005c4 <segchar+0x478>)
 80003b6:	f001 fa09 	bl	80017cc <HAL_GPIO_WritePin>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2140      	movs	r1, #64	; 0x40
 80003be:	4880      	ldr	r0, [pc, #512]	; (80005c0 <segchar+0x474>)
 80003c0:	f001 fa04 	bl	80017cc <HAL_GPIO_WritePin>
 80003c4:	2200      	movs	r2, #0
 80003c6:	2120      	movs	r1, #32
 80003c8:	487d      	ldr	r0, [pc, #500]	; (80005c0 <segchar+0x474>)
 80003ca:	f001 f9ff 	bl	80017cc <HAL_GPIO_WritePin>
 80003ce:	2200      	movs	r2, #0
 80003d0:	2110      	movs	r1, #16
 80003d2:	487b      	ldr	r0, [pc, #492]	; (80005c0 <segchar+0x474>)
 80003d4:	f001 f9fa 	bl	80017cc <HAL_GPIO_WritePin>
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003de:	487a      	ldr	r0, [pc, #488]	; (80005c8 <segchar+0x47c>)
 80003e0:	f001 f9f4 	bl	80017cc <HAL_GPIO_WritePin>
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ea:	4877      	ldr	r0, [pc, #476]	; (80005c8 <segchar+0x47c>)
 80003ec:	f001 f9ee 	bl	80017cc <HAL_GPIO_WritePin>
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f6:	4874      	ldr	r0, [pc, #464]	; (80005c8 <segchar+0x47c>)
 80003f8:	f001 f9e8 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 80003fc:	e3d5      	b.n	8000baa <segchar+0xa5e>
		case 3:
			SA_SET;SB_RESET;SC_RESET;SD_SET;SE_RESET;SF_RESET;SG_SET;SG2_RESET;SH_RESET;SJ_RESET;SK_SET;SL_RESET;SM_RESET;SN_SET;
 80003fe:	2201      	movs	r2, #1
 8000400:	2104      	movs	r1, #4
 8000402:	486f      	ldr	r0, [pc, #444]	; (80005c0 <segchar+0x474>)
 8000404:	f001 f9e2 	bl	80017cc <HAL_GPIO_WritePin>
 8000408:	2200      	movs	r2, #0
 800040a:	2102      	movs	r1, #2
 800040c:	486c      	ldr	r0, [pc, #432]	; (80005c0 <segchar+0x474>)
 800040e:	f001 f9dd 	bl	80017cc <HAL_GPIO_WritePin>
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	486a      	ldr	r0, [pc, #424]	; (80005c4 <segchar+0x478>)
 800041a:	f001 f9d7 	bl	80017cc <HAL_GPIO_WritePin>
 800041e:	2201      	movs	r2, #1
 8000420:	2102      	movs	r1, #2
 8000422:	4868      	ldr	r0, [pc, #416]	; (80005c4 <segchar+0x478>)
 8000424:	f001 f9d2 	bl	80017cc <HAL_GPIO_WritePin>
 8000428:	2200      	movs	r2, #0
 800042a:	2101      	movs	r1, #1
 800042c:	4864      	ldr	r0, [pc, #400]	; (80005c0 <segchar+0x474>)
 800042e:	f001 f9cd 	bl	80017cc <HAL_GPIO_WritePin>
 8000432:	2200      	movs	r2, #0
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	4862      	ldr	r0, [pc, #392]	; (80005c0 <segchar+0x474>)
 8000438:	f001 f9c8 	bl	80017cc <HAL_GPIO_WritePin>
 800043c:	2201      	movs	r2, #1
 800043e:	2108      	movs	r1, #8
 8000440:	485f      	ldr	r0, [pc, #380]	; (80005c0 <segchar+0x474>)
 8000442:	f001 f9c3 	bl	80017cc <HAL_GPIO_WritePin>
 8000446:	2200      	movs	r2, #0
 8000448:	2101      	movs	r1, #1
 800044a:	485e      	ldr	r0, [pc, #376]	; (80005c4 <segchar+0x478>)
 800044c:	f001 f9be 	bl	80017cc <HAL_GPIO_WritePin>
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	485a      	ldr	r0, [pc, #360]	; (80005c0 <segchar+0x474>)
 8000456:	f001 f9b9 	bl	80017cc <HAL_GPIO_WritePin>
 800045a:	2200      	movs	r2, #0
 800045c:	2120      	movs	r1, #32
 800045e:	4858      	ldr	r0, [pc, #352]	; (80005c0 <segchar+0x474>)
 8000460:	f001 f9b4 	bl	80017cc <HAL_GPIO_WritePin>
 8000464:	2201      	movs	r2, #1
 8000466:	2110      	movs	r1, #16
 8000468:	4855      	ldr	r0, [pc, #340]	; (80005c0 <segchar+0x474>)
 800046a:	f001 f9af 	bl	80017cc <HAL_GPIO_WritePin>
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000474:	4854      	ldr	r0, [pc, #336]	; (80005c8 <segchar+0x47c>)
 8000476:	f001 f9a9 	bl	80017cc <HAL_GPIO_WritePin>
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000480:	4851      	ldr	r0, [pc, #324]	; (80005c8 <segchar+0x47c>)
 8000482:	f001 f9a3 	bl	80017cc <HAL_GPIO_WritePin>
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048c:	484e      	ldr	r0, [pc, #312]	; (80005c8 <segchar+0x47c>)
 800048e:	f001 f99d 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000492:	e38a      	b.n	8000baa <segchar+0xa5e>
		case 4:
			//SA_RESET;SB_SET;SC_SET;SD_RESET;SE_RESET;SF_RESET;SG_RESET;SG2_SET;SH_RESET;SJ_RESET;SK_SET;SL_RESET;SM_RESET;SN_RESET;
			SA_RESET;SB_SET;SC_SET;SD_RESET;SE_RESET;SF_SET;SG_SET;SG2_SET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	4849      	ldr	r0, [pc, #292]	; (80005c0 <segchar+0x474>)
 800049a:	f001 f997 	bl	80017cc <HAL_GPIO_WritePin>
 800049e:	2201      	movs	r2, #1
 80004a0:	2102      	movs	r1, #2
 80004a2:	4847      	ldr	r0, [pc, #284]	; (80005c0 <segchar+0x474>)
 80004a4:	f001 f992 	bl	80017cc <HAL_GPIO_WritePin>
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ae:	4845      	ldr	r0, [pc, #276]	; (80005c4 <segchar+0x478>)
 80004b0:	f001 f98c 	bl	80017cc <HAL_GPIO_WritePin>
 80004b4:	2200      	movs	r2, #0
 80004b6:	2102      	movs	r1, #2
 80004b8:	4842      	ldr	r0, [pc, #264]	; (80005c4 <segchar+0x478>)
 80004ba:	f001 f987 	bl	80017cc <HAL_GPIO_WritePin>
 80004be:	2200      	movs	r2, #0
 80004c0:	2101      	movs	r1, #1
 80004c2:	483f      	ldr	r0, [pc, #252]	; (80005c0 <segchar+0x474>)
 80004c4:	f001 f982 	bl	80017cc <HAL_GPIO_WritePin>
 80004c8:	2201      	movs	r2, #1
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	483c      	ldr	r0, [pc, #240]	; (80005c0 <segchar+0x474>)
 80004ce:	f001 f97d 	bl	80017cc <HAL_GPIO_WritePin>
 80004d2:	2201      	movs	r2, #1
 80004d4:	2108      	movs	r1, #8
 80004d6:	483a      	ldr	r0, [pc, #232]	; (80005c0 <segchar+0x474>)
 80004d8:	f001 f978 	bl	80017cc <HAL_GPIO_WritePin>
 80004dc:	2201      	movs	r2, #1
 80004de:	2101      	movs	r1, #1
 80004e0:	4838      	ldr	r0, [pc, #224]	; (80005c4 <segchar+0x478>)
 80004e2:	f001 f973 	bl	80017cc <HAL_GPIO_WritePin>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	4835      	ldr	r0, [pc, #212]	; (80005c0 <segchar+0x474>)
 80004ec:	f001 f96e 	bl	80017cc <HAL_GPIO_WritePin>
 80004f0:	2200      	movs	r2, #0
 80004f2:	2120      	movs	r1, #32
 80004f4:	4832      	ldr	r0, [pc, #200]	; (80005c0 <segchar+0x474>)
 80004f6:	f001 f969 	bl	80017cc <HAL_GPIO_WritePin>
 80004fa:	2200      	movs	r2, #0
 80004fc:	2110      	movs	r1, #16
 80004fe:	4830      	ldr	r0, [pc, #192]	; (80005c0 <segchar+0x474>)
 8000500:	f001 f964 	bl	80017cc <HAL_GPIO_WritePin>
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	482f      	ldr	r0, [pc, #188]	; (80005c8 <segchar+0x47c>)
 800050c:	f001 f95e 	bl	80017cc <HAL_GPIO_WritePin>
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000516:	482c      	ldr	r0, [pc, #176]	; (80005c8 <segchar+0x47c>)
 8000518:	f001 f958 	bl	80017cc <HAL_GPIO_WritePin>
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	4829      	ldr	r0, [pc, #164]	; (80005c8 <segchar+0x47c>)
 8000524:	f001 f952 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000528:	e33f      	b.n	8000baa <segchar+0xa5e>
		case 5:
			SA_SET;SB_RESET;SC_SET;SD_SET;SE_RESET;SF_SET;SG_SET;SG2_SET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 800052a:	2201      	movs	r2, #1
 800052c:	2104      	movs	r1, #4
 800052e:	4824      	ldr	r0, [pc, #144]	; (80005c0 <segchar+0x474>)
 8000530:	f001 f94c 	bl	80017cc <HAL_GPIO_WritePin>
 8000534:	2200      	movs	r2, #0
 8000536:	2102      	movs	r1, #2
 8000538:	4821      	ldr	r0, [pc, #132]	; (80005c0 <segchar+0x474>)
 800053a:	f001 f947 	bl	80017cc <HAL_GPIO_WritePin>
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	481f      	ldr	r0, [pc, #124]	; (80005c4 <segchar+0x478>)
 8000546:	f001 f941 	bl	80017cc <HAL_GPIO_WritePin>
 800054a:	2201      	movs	r2, #1
 800054c:	2102      	movs	r1, #2
 800054e:	481d      	ldr	r0, [pc, #116]	; (80005c4 <segchar+0x478>)
 8000550:	f001 f93c 	bl	80017cc <HAL_GPIO_WritePin>
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	4819      	ldr	r0, [pc, #100]	; (80005c0 <segchar+0x474>)
 800055a:	f001 f937 	bl	80017cc <HAL_GPIO_WritePin>
 800055e:	2201      	movs	r2, #1
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4817      	ldr	r0, [pc, #92]	; (80005c0 <segchar+0x474>)
 8000564:	f001 f932 	bl	80017cc <HAL_GPIO_WritePin>
 8000568:	2201      	movs	r2, #1
 800056a:	2108      	movs	r1, #8
 800056c:	4814      	ldr	r0, [pc, #80]	; (80005c0 <segchar+0x474>)
 800056e:	f001 f92d 	bl	80017cc <HAL_GPIO_WritePin>
 8000572:	2201      	movs	r2, #1
 8000574:	2101      	movs	r1, #1
 8000576:	4813      	ldr	r0, [pc, #76]	; (80005c4 <segchar+0x478>)
 8000578:	f001 f928 	bl	80017cc <HAL_GPIO_WritePin>
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	480f      	ldr	r0, [pc, #60]	; (80005c0 <segchar+0x474>)
 8000582:	f001 f923 	bl	80017cc <HAL_GPIO_WritePin>
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <segchar+0x474>)
 800058c:	f001 f91e 	bl	80017cc <HAL_GPIO_WritePin>
 8000590:	2200      	movs	r2, #0
 8000592:	2110      	movs	r1, #16
 8000594:	480a      	ldr	r0, [pc, #40]	; (80005c0 <segchar+0x474>)
 8000596:	f001 f919 	bl	80017cc <HAL_GPIO_WritePin>
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <segchar+0x47c>)
 80005a2:	f001 f913 	bl	80017cc <HAL_GPIO_WritePin>
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <segchar+0x47c>)
 80005ae:	f001 f90d 	bl	80017cc <HAL_GPIO_WritePin>
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <segchar+0x47c>)
 80005ba:	f001 f907 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 80005be:	e2f4      	b.n	8000baa <segchar+0xa5e>
 80005c0:	40010800 	.word	0x40010800
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	40011000 	.word	0x40011000
		case 6:
			SA_SET;SB_RESET;SC_SET;SD_SET;SE_SET;SF_SET;SG_SET;SG2_SET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 80005cc:	2201      	movs	r2, #1
 80005ce:	2104      	movs	r1, #4
 80005d0:	48ba      	ldr	r0, [pc, #744]	; (80008bc <segchar+0x770>)
 80005d2:	f001 f8fb 	bl	80017cc <HAL_GPIO_WritePin>
 80005d6:	2200      	movs	r2, #0
 80005d8:	2102      	movs	r1, #2
 80005da:	48b8      	ldr	r0, [pc, #736]	; (80008bc <segchar+0x770>)
 80005dc:	f001 f8f6 	bl	80017cc <HAL_GPIO_WritePin>
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e6:	48b6      	ldr	r0, [pc, #728]	; (80008c0 <segchar+0x774>)
 80005e8:	f001 f8f0 	bl	80017cc <HAL_GPIO_WritePin>
 80005ec:	2201      	movs	r2, #1
 80005ee:	2102      	movs	r1, #2
 80005f0:	48b3      	ldr	r0, [pc, #716]	; (80008c0 <segchar+0x774>)
 80005f2:	f001 f8eb 	bl	80017cc <HAL_GPIO_WritePin>
 80005f6:	2201      	movs	r2, #1
 80005f8:	2101      	movs	r1, #1
 80005fa:	48b0      	ldr	r0, [pc, #704]	; (80008bc <segchar+0x770>)
 80005fc:	f001 f8e6 	bl	80017cc <HAL_GPIO_WritePin>
 8000600:	2201      	movs	r2, #1
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	48ad      	ldr	r0, [pc, #692]	; (80008bc <segchar+0x770>)
 8000606:	f001 f8e1 	bl	80017cc <HAL_GPIO_WritePin>
 800060a:	2201      	movs	r2, #1
 800060c:	2108      	movs	r1, #8
 800060e:	48ab      	ldr	r0, [pc, #684]	; (80008bc <segchar+0x770>)
 8000610:	f001 f8dc 	bl	80017cc <HAL_GPIO_WritePin>
 8000614:	2201      	movs	r2, #1
 8000616:	2101      	movs	r1, #1
 8000618:	48a9      	ldr	r0, [pc, #676]	; (80008c0 <segchar+0x774>)
 800061a:	f001 f8d7 	bl	80017cc <HAL_GPIO_WritePin>
 800061e:	2200      	movs	r2, #0
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	48a6      	ldr	r0, [pc, #664]	; (80008bc <segchar+0x770>)
 8000624:	f001 f8d2 	bl	80017cc <HAL_GPIO_WritePin>
 8000628:	2200      	movs	r2, #0
 800062a:	2120      	movs	r1, #32
 800062c:	48a3      	ldr	r0, [pc, #652]	; (80008bc <segchar+0x770>)
 800062e:	f001 f8cd 	bl	80017cc <HAL_GPIO_WritePin>
 8000632:	2200      	movs	r2, #0
 8000634:	2110      	movs	r1, #16
 8000636:	48a1      	ldr	r0, [pc, #644]	; (80008bc <segchar+0x770>)
 8000638:	f001 f8c8 	bl	80017cc <HAL_GPIO_WritePin>
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000642:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <segchar+0x778>)
 8000644:	f001 f8c2 	bl	80017cc <HAL_GPIO_WritePin>
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064e:	489d      	ldr	r0, [pc, #628]	; (80008c4 <segchar+0x778>)
 8000650:	f001 f8bc 	bl	80017cc <HAL_GPIO_WritePin>
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	489a      	ldr	r0, [pc, #616]	; (80008c4 <segchar+0x778>)
 800065c:	f001 f8b6 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000660:	e2a3      	b.n	8000baa <segchar+0xa5e>
		case 7:
			SA_SET;SB_RESET;SC_RESET;SD_RESET;SE_RESET;SF_RESET;SG_RESET;SG2_RESET;SH_RESET;SJ_RESET;SK_SET;SL_SET;SM_RESET;SN_RESET;
 8000662:	2201      	movs	r2, #1
 8000664:	2104      	movs	r1, #4
 8000666:	4895      	ldr	r0, [pc, #596]	; (80008bc <segchar+0x770>)
 8000668:	f001 f8b0 	bl	80017cc <HAL_GPIO_WritePin>
 800066c:	2200      	movs	r2, #0
 800066e:	2102      	movs	r1, #2
 8000670:	4892      	ldr	r0, [pc, #584]	; (80008bc <segchar+0x770>)
 8000672:	f001 f8ab 	bl	80017cc <HAL_GPIO_WritePin>
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067c:	4890      	ldr	r0, [pc, #576]	; (80008c0 <segchar+0x774>)
 800067e:	f001 f8a5 	bl	80017cc <HAL_GPIO_WritePin>
 8000682:	2200      	movs	r2, #0
 8000684:	2102      	movs	r1, #2
 8000686:	488e      	ldr	r0, [pc, #568]	; (80008c0 <segchar+0x774>)
 8000688:	f001 f8a0 	bl	80017cc <HAL_GPIO_WritePin>
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	488a      	ldr	r0, [pc, #552]	; (80008bc <segchar+0x770>)
 8000692:	f001 f89b 	bl	80017cc <HAL_GPIO_WritePin>
 8000696:	2200      	movs	r2, #0
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	4888      	ldr	r0, [pc, #544]	; (80008bc <segchar+0x770>)
 800069c:	f001 f896 	bl	80017cc <HAL_GPIO_WritePin>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	4885      	ldr	r0, [pc, #532]	; (80008bc <segchar+0x770>)
 80006a6:	f001 f891 	bl	80017cc <HAL_GPIO_WritePin>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	4884      	ldr	r0, [pc, #528]	; (80008c0 <segchar+0x774>)
 80006b0:	f001 f88c 	bl	80017cc <HAL_GPIO_WritePin>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2140      	movs	r1, #64	; 0x40
 80006b8:	4880      	ldr	r0, [pc, #512]	; (80008bc <segchar+0x770>)
 80006ba:	f001 f887 	bl	80017cc <HAL_GPIO_WritePin>
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	487e      	ldr	r0, [pc, #504]	; (80008bc <segchar+0x770>)
 80006c4:	f001 f882 	bl	80017cc <HAL_GPIO_WritePin>
 80006c8:	2201      	movs	r2, #1
 80006ca:	2110      	movs	r1, #16
 80006cc:	487b      	ldr	r0, [pc, #492]	; (80008bc <segchar+0x770>)
 80006ce:	f001 f87d 	bl	80017cc <HAL_GPIO_WritePin>
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <segchar+0x778>)
 80006da:	f001 f877 	bl	80017cc <HAL_GPIO_WritePin>
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e4:	4877      	ldr	r0, [pc, #476]	; (80008c4 <segchar+0x778>)
 80006e6:	f001 f871 	bl	80017cc <HAL_GPIO_WritePin>
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	4874      	ldr	r0, [pc, #464]	; (80008c4 <segchar+0x778>)
 80006f2:	f001 f86b 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 80006f6:	e258      	b.n	8000baa <segchar+0xa5e>
		case 8:
			SA_SET;SB_SET;SC_SET;SD_SET;SE_SET;SF_SET;SG_SET;SG2_SET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 80006f8:	2201      	movs	r2, #1
 80006fa:	2104      	movs	r1, #4
 80006fc:	486f      	ldr	r0, [pc, #444]	; (80008bc <segchar+0x770>)
 80006fe:	f001 f865 	bl	80017cc <HAL_GPIO_WritePin>
 8000702:	2201      	movs	r2, #1
 8000704:	2102      	movs	r1, #2
 8000706:	486d      	ldr	r0, [pc, #436]	; (80008bc <segchar+0x770>)
 8000708:	f001 f860 	bl	80017cc <HAL_GPIO_WritePin>
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000712:	486b      	ldr	r0, [pc, #428]	; (80008c0 <segchar+0x774>)
 8000714:	f001 f85a 	bl	80017cc <HAL_GPIO_WritePin>
 8000718:	2201      	movs	r2, #1
 800071a:	2102      	movs	r1, #2
 800071c:	4868      	ldr	r0, [pc, #416]	; (80008c0 <segchar+0x774>)
 800071e:	f001 f855 	bl	80017cc <HAL_GPIO_WritePin>
 8000722:	2201      	movs	r2, #1
 8000724:	2101      	movs	r1, #1
 8000726:	4865      	ldr	r0, [pc, #404]	; (80008bc <segchar+0x770>)
 8000728:	f001 f850 	bl	80017cc <HAL_GPIO_WritePin>
 800072c:	2201      	movs	r2, #1
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	4862      	ldr	r0, [pc, #392]	; (80008bc <segchar+0x770>)
 8000732:	f001 f84b 	bl	80017cc <HAL_GPIO_WritePin>
 8000736:	2201      	movs	r2, #1
 8000738:	2108      	movs	r1, #8
 800073a:	4860      	ldr	r0, [pc, #384]	; (80008bc <segchar+0x770>)
 800073c:	f001 f846 	bl	80017cc <HAL_GPIO_WritePin>
 8000740:	2201      	movs	r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	485e      	ldr	r0, [pc, #376]	; (80008c0 <segchar+0x774>)
 8000746:	f001 f841 	bl	80017cc <HAL_GPIO_WritePin>
 800074a:	2200      	movs	r2, #0
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	485b      	ldr	r0, [pc, #364]	; (80008bc <segchar+0x770>)
 8000750:	f001 f83c 	bl	80017cc <HAL_GPIO_WritePin>
 8000754:	2200      	movs	r2, #0
 8000756:	2120      	movs	r1, #32
 8000758:	4858      	ldr	r0, [pc, #352]	; (80008bc <segchar+0x770>)
 800075a:	f001 f837 	bl	80017cc <HAL_GPIO_WritePin>
 800075e:	2200      	movs	r2, #0
 8000760:	2110      	movs	r1, #16
 8000762:	4856      	ldr	r0, [pc, #344]	; (80008bc <segchar+0x770>)
 8000764:	f001 f832 	bl	80017cc <HAL_GPIO_WritePin>
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076e:	4855      	ldr	r0, [pc, #340]	; (80008c4 <segchar+0x778>)
 8000770:	f001 f82c 	bl	80017cc <HAL_GPIO_WritePin>
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077a:	4852      	ldr	r0, [pc, #328]	; (80008c4 <segchar+0x778>)
 800077c:	f001 f826 	bl	80017cc <HAL_GPIO_WritePin>
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	484f      	ldr	r0, [pc, #316]	; (80008c4 <segchar+0x778>)
 8000788:	f001 f820 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 800078c:	e20d      	b.n	8000baa <segchar+0xa5e>
		case 9:
			SA_SET;SB_SET;SC_SET;SD_SET;SE_RESET;SF_SET;SG_SET;SG2_SET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 800078e:	2201      	movs	r2, #1
 8000790:	2104      	movs	r1, #4
 8000792:	484a      	ldr	r0, [pc, #296]	; (80008bc <segchar+0x770>)
 8000794:	f001 f81a 	bl	80017cc <HAL_GPIO_WritePin>
 8000798:	2201      	movs	r2, #1
 800079a:	2102      	movs	r1, #2
 800079c:	4847      	ldr	r0, [pc, #284]	; (80008bc <segchar+0x770>)
 800079e:	f001 f815 	bl	80017cc <HAL_GPIO_WritePin>
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	4845      	ldr	r0, [pc, #276]	; (80008c0 <segchar+0x774>)
 80007aa:	f001 f80f 	bl	80017cc <HAL_GPIO_WritePin>
 80007ae:	2201      	movs	r2, #1
 80007b0:	2102      	movs	r1, #2
 80007b2:	4843      	ldr	r0, [pc, #268]	; (80008c0 <segchar+0x774>)
 80007b4:	f001 f80a 	bl	80017cc <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	483f      	ldr	r0, [pc, #252]	; (80008bc <segchar+0x770>)
 80007be:	f001 f805 	bl	80017cc <HAL_GPIO_WritePin>
 80007c2:	2201      	movs	r2, #1
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	483d      	ldr	r0, [pc, #244]	; (80008bc <segchar+0x770>)
 80007c8:	f001 f800 	bl	80017cc <HAL_GPIO_WritePin>
 80007cc:	2201      	movs	r2, #1
 80007ce:	2108      	movs	r1, #8
 80007d0:	483a      	ldr	r0, [pc, #232]	; (80008bc <segchar+0x770>)
 80007d2:	f000 fffb 	bl	80017cc <HAL_GPIO_WritePin>
 80007d6:	2201      	movs	r2, #1
 80007d8:	2101      	movs	r1, #1
 80007da:	4839      	ldr	r0, [pc, #228]	; (80008c0 <segchar+0x774>)
 80007dc:	f000 fff6 	bl	80017cc <HAL_GPIO_WritePin>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2140      	movs	r1, #64	; 0x40
 80007e4:	4835      	ldr	r0, [pc, #212]	; (80008bc <segchar+0x770>)
 80007e6:	f000 fff1 	bl	80017cc <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	4833      	ldr	r0, [pc, #204]	; (80008bc <segchar+0x770>)
 80007f0:	f000 ffec 	bl	80017cc <HAL_GPIO_WritePin>
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	4830      	ldr	r0, [pc, #192]	; (80008bc <segchar+0x770>)
 80007fa:	f000 ffe7 	bl	80017cc <HAL_GPIO_WritePin>
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <segchar+0x778>)
 8000806:	f000 ffe1 	bl	80017cc <HAL_GPIO_WritePin>
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <segchar+0x778>)
 8000812:	f000 ffdb 	bl	80017cc <HAL_GPIO_WritePin>
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	4829      	ldr	r0, [pc, #164]	; (80008c4 <segchar+0x778>)
 800081e:	f000 ffd5 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000822:	e1c2      	b.n	8000baa <segchar+0xa5e>
		case 0:
			SA_SET;SB_SET;SC_SET;SD_SET;SE_SET;SF_SET;SG_RESET;SG2_RESET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 8000824:	2201      	movs	r2, #1
 8000826:	2104      	movs	r1, #4
 8000828:	4824      	ldr	r0, [pc, #144]	; (80008bc <segchar+0x770>)
 800082a:	f000 ffcf 	bl	80017cc <HAL_GPIO_WritePin>
 800082e:	2201      	movs	r2, #1
 8000830:	2102      	movs	r1, #2
 8000832:	4822      	ldr	r0, [pc, #136]	; (80008bc <segchar+0x770>)
 8000834:	f000 ffca 	bl	80017cc <HAL_GPIO_WritePin>
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	4820      	ldr	r0, [pc, #128]	; (80008c0 <segchar+0x774>)
 8000840:	f000 ffc4 	bl	80017cc <HAL_GPIO_WritePin>
 8000844:	2201      	movs	r2, #1
 8000846:	2102      	movs	r1, #2
 8000848:	481d      	ldr	r0, [pc, #116]	; (80008c0 <segchar+0x774>)
 800084a:	f000 ffbf 	bl	80017cc <HAL_GPIO_WritePin>
 800084e:	2201      	movs	r2, #1
 8000850:	2101      	movs	r1, #1
 8000852:	481a      	ldr	r0, [pc, #104]	; (80008bc <segchar+0x770>)
 8000854:	f000 ffba 	bl	80017cc <HAL_GPIO_WritePin>
 8000858:	2201      	movs	r2, #1
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	4817      	ldr	r0, [pc, #92]	; (80008bc <segchar+0x770>)
 800085e:	f000 ffb5 	bl	80017cc <HAL_GPIO_WritePin>
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	4815      	ldr	r0, [pc, #84]	; (80008bc <segchar+0x770>)
 8000868:	f000 ffb0 	bl	80017cc <HAL_GPIO_WritePin>
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <segchar+0x774>)
 8000872:	f000 ffab 	bl	80017cc <HAL_GPIO_WritePin>
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4810      	ldr	r0, [pc, #64]	; (80008bc <segchar+0x770>)
 800087c:	f000 ffa6 	bl	80017cc <HAL_GPIO_WritePin>
 8000880:	2200      	movs	r2, #0
 8000882:	2120      	movs	r1, #32
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <segchar+0x770>)
 8000886:	f000 ffa1 	bl	80017cc <HAL_GPIO_WritePin>
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <segchar+0x770>)
 8000890:	f000 ff9c 	bl	80017cc <HAL_GPIO_WritePin>
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <segchar+0x778>)
 800089c:	f000 ff96 	bl	80017cc <HAL_GPIO_WritePin>
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <segchar+0x778>)
 80008a8:	f000 ff90 	bl	80017cc <HAL_GPIO_WritePin>
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <segchar+0x778>)
 80008b4:	f000 ff8a 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 80008b8:	e177      	b.n	8000baa <segchar+0xa5e>
 80008ba:	bf00      	nop
 80008bc:	40010800 	.word	0x40010800
 80008c0:	40010c00 	.word	0x40010c00
 80008c4:	40011000 	.word	0x40011000
		case 'P':
			SA_SET;SB_SET;SG_RESET;SG2_RESET;SF_SET;SE_SET;SC_SET;SD_RESET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;
 80008c8:	2201      	movs	r2, #1
 80008ca:	2104      	movs	r1, #4
 80008cc:	48b9      	ldr	r0, [pc, #740]	; (8000bb4 <segchar+0xa68>)
 80008ce:	f000 ff7d 	bl	80017cc <HAL_GPIO_WritePin>
 80008d2:	2201      	movs	r2, #1
 80008d4:	2102      	movs	r1, #2
 80008d6:	48b7      	ldr	r0, [pc, #732]	; (8000bb4 <segchar+0xa68>)
 80008d8:	f000 ff78 	bl	80017cc <HAL_GPIO_WritePin>
 80008dc:	2200      	movs	r2, #0
 80008de:	2108      	movs	r1, #8
 80008e0:	48b4      	ldr	r0, [pc, #720]	; (8000bb4 <segchar+0xa68>)
 80008e2:	f000 ff73 	bl	80017cc <HAL_GPIO_WritePin>
 80008e6:	2200      	movs	r2, #0
 80008e8:	2101      	movs	r1, #1
 80008ea:	48b3      	ldr	r0, [pc, #716]	; (8000bb8 <segchar+0xa6c>)
 80008ec:	f000 ff6e 	bl	80017cc <HAL_GPIO_WritePin>
 80008f0:	2201      	movs	r2, #1
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	48af      	ldr	r0, [pc, #700]	; (8000bb4 <segchar+0xa68>)
 80008f6:	f000 ff69 	bl	80017cc <HAL_GPIO_WritePin>
 80008fa:	2201      	movs	r2, #1
 80008fc:	2101      	movs	r1, #1
 80008fe:	48ad      	ldr	r0, [pc, #692]	; (8000bb4 <segchar+0xa68>)
 8000900:	f000 ff64 	bl	80017cc <HAL_GPIO_WritePin>
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090a:	48ab      	ldr	r0, [pc, #684]	; (8000bb8 <segchar+0xa6c>)
 800090c:	f000 ff5e 	bl	80017cc <HAL_GPIO_WritePin>
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	48a8      	ldr	r0, [pc, #672]	; (8000bb8 <segchar+0xa6c>)
 8000916:	f000 ff59 	bl	80017cc <HAL_GPIO_WritePin>
 800091a:	2200      	movs	r2, #0
 800091c:	2140      	movs	r1, #64	; 0x40
 800091e:	48a5      	ldr	r0, [pc, #660]	; (8000bb4 <segchar+0xa68>)
 8000920:	f000 ff54 	bl	80017cc <HAL_GPIO_WritePin>
 8000924:	2200      	movs	r2, #0
 8000926:	2120      	movs	r1, #32
 8000928:	48a2      	ldr	r0, [pc, #648]	; (8000bb4 <segchar+0xa68>)
 800092a:	f000 ff4f 	bl	80017cc <HAL_GPIO_WritePin>
 800092e:	2200      	movs	r2, #0
 8000930:	2110      	movs	r1, #16
 8000932:	48a0      	ldr	r0, [pc, #640]	; (8000bb4 <segchar+0xa68>)
 8000934:	f000 ff4a 	bl	80017cc <HAL_GPIO_WritePin>
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	489f      	ldr	r0, [pc, #636]	; (8000bbc <segchar+0xa70>)
 8000940:	f000 ff44 	bl	80017cc <HAL_GPIO_WritePin>
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094a:	489c      	ldr	r0, [pc, #624]	; (8000bbc <segchar+0xa70>)
 800094c:	f000 ff3e 	bl	80017cc <HAL_GPIO_WritePin>
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	4899      	ldr	r0, [pc, #612]	; (8000bbc <segchar+0xa70>)
 8000958:	f000 ff38 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 800095c:	e125      	b.n	8000baa <segchar+0xa5e>
		case 'A':
			SA_SET;SB_SET;SF_SET;SE_SET;SC_SET;SG_SET;SG2_SET;SH_RESET;SJ_RESET;SK_RESET;SL_RESET;SM_RESET;SN_RESET;SD_RESET;
 800095e:	2201      	movs	r2, #1
 8000960:	2104      	movs	r1, #4
 8000962:	4894      	ldr	r0, [pc, #592]	; (8000bb4 <segchar+0xa68>)
 8000964:	f000 ff32 	bl	80017cc <HAL_GPIO_WritePin>
 8000968:	2201      	movs	r2, #1
 800096a:	2102      	movs	r1, #2
 800096c:	4891      	ldr	r0, [pc, #580]	; (8000bb4 <segchar+0xa68>)
 800096e:	f000 ff2d 	bl	80017cc <HAL_GPIO_WritePin>
 8000972:	2201      	movs	r2, #1
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	488f      	ldr	r0, [pc, #572]	; (8000bb4 <segchar+0xa68>)
 8000978:	f000 ff28 	bl	80017cc <HAL_GPIO_WritePin>
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	488c      	ldr	r0, [pc, #560]	; (8000bb4 <segchar+0xa68>)
 8000982:	f000 ff23 	bl	80017cc <HAL_GPIO_WritePin>
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	488a      	ldr	r0, [pc, #552]	; (8000bb8 <segchar+0xa6c>)
 800098e:	f000 ff1d 	bl	80017cc <HAL_GPIO_WritePin>
 8000992:	2201      	movs	r2, #1
 8000994:	2108      	movs	r1, #8
 8000996:	4887      	ldr	r0, [pc, #540]	; (8000bb4 <segchar+0xa68>)
 8000998:	f000 ff18 	bl	80017cc <HAL_GPIO_WritePin>
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	4885      	ldr	r0, [pc, #532]	; (8000bb8 <segchar+0xa6c>)
 80009a2:	f000 ff13 	bl	80017cc <HAL_GPIO_WritePin>
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4882      	ldr	r0, [pc, #520]	; (8000bb4 <segchar+0xa68>)
 80009ac:	f000 ff0e 	bl	80017cc <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	487f      	ldr	r0, [pc, #508]	; (8000bb4 <segchar+0xa68>)
 80009b6:	f000 ff09 	bl	80017cc <HAL_GPIO_WritePin>
 80009ba:	2200      	movs	r2, #0
 80009bc:	2110      	movs	r1, #16
 80009be:	487d      	ldr	r0, [pc, #500]	; (8000bb4 <segchar+0xa68>)
 80009c0:	f000 ff04 	bl	80017cc <HAL_GPIO_WritePin>
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ca:	487c      	ldr	r0, [pc, #496]	; (8000bbc <segchar+0xa70>)
 80009cc:	f000 fefe 	bl	80017cc <HAL_GPIO_WritePin>
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d6:	4879      	ldr	r0, [pc, #484]	; (8000bbc <segchar+0xa70>)
 80009d8:	f000 fef8 	bl	80017cc <HAL_GPIO_WritePin>
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e2:	4876      	ldr	r0, [pc, #472]	; (8000bbc <segchar+0xa70>)
 80009e4:	f000 fef2 	bl	80017cc <HAL_GPIO_WritePin>
 80009e8:	2200      	movs	r2, #0
 80009ea:	2102      	movs	r1, #2
 80009ec:	4872      	ldr	r0, [pc, #456]	; (8000bb8 <segchar+0xa6c>)
 80009ee:	f000 feed 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 80009f2:	e0da      	b.n	8000baa <segchar+0xa5e>
		case 'H':
			SF_SET;SE_SET;SD_SET;SC_SET;SB_SET;SM_SET;SJ_SET;SA_RESET;SH_RESET;SK_RESET;SL_RESET;SN_RESET;SG_RESET;SG2_RESET;
 80009f4:	2201      	movs	r2, #1
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	486e      	ldr	r0, [pc, #440]	; (8000bb4 <segchar+0xa68>)
 80009fa:	f000 fee7 	bl	80017cc <HAL_GPIO_WritePin>
 80009fe:	2201      	movs	r2, #1
 8000a00:	2101      	movs	r1, #1
 8000a02:	486c      	ldr	r0, [pc, #432]	; (8000bb4 <segchar+0xa68>)
 8000a04:	f000 fee2 	bl	80017cc <HAL_GPIO_WritePin>
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	486a      	ldr	r0, [pc, #424]	; (8000bb8 <segchar+0xa6c>)
 8000a0e:	f000 fedd 	bl	80017cc <HAL_GPIO_WritePin>
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a18:	4867      	ldr	r0, [pc, #412]	; (8000bb8 <segchar+0xa6c>)
 8000a1a:	f000 fed7 	bl	80017cc <HAL_GPIO_WritePin>
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2102      	movs	r1, #2
 8000a22:	4864      	ldr	r0, [pc, #400]	; (8000bb4 <segchar+0xa68>)
 8000a24:	f000 fed2 	bl	80017cc <HAL_GPIO_WritePin>
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2e:	4863      	ldr	r0, [pc, #396]	; (8000bbc <segchar+0xa70>)
 8000a30:	f000 fecc 	bl	80017cc <HAL_GPIO_WritePin>
 8000a34:	2201      	movs	r2, #1
 8000a36:	2120      	movs	r1, #32
 8000a38:	485e      	ldr	r0, [pc, #376]	; (8000bb4 <segchar+0xa68>)
 8000a3a:	f000 fec7 	bl	80017cc <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2104      	movs	r1, #4
 8000a42:	485c      	ldr	r0, [pc, #368]	; (8000bb4 <segchar+0xa68>)
 8000a44:	f000 fec2 	bl	80017cc <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	4859      	ldr	r0, [pc, #356]	; (8000bb4 <segchar+0xa68>)
 8000a4e:	f000 febd 	bl	80017cc <HAL_GPIO_WritePin>
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	4857      	ldr	r0, [pc, #348]	; (8000bb4 <segchar+0xa68>)
 8000a58:	f000 feb8 	bl	80017cc <HAL_GPIO_WritePin>
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a62:	4856      	ldr	r0, [pc, #344]	; (8000bbc <segchar+0xa70>)
 8000a64:	f000 feb2 	bl	80017cc <HAL_GPIO_WritePin>
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	4853      	ldr	r0, [pc, #332]	; (8000bbc <segchar+0xa70>)
 8000a70:	f000 feac 	bl	80017cc <HAL_GPIO_WritePin>
 8000a74:	2200      	movs	r2, #0
 8000a76:	2108      	movs	r1, #8
 8000a78:	484e      	ldr	r0, [pc, #312]	; (8000bb4 <segchar+0xa68>)
 8000a7a:	f000 fea7 	bl	80017cc <HAL_GPIO_WritePin>
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2101      	movs	r1, #1
 8000a82:	484d      	ldr	r0, [pc, #308]	; (8000bb8 <segchar+0xa6c>)
 8000a84:	f000 fea2 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000a88:	e08f      	b.n	8000baa <segchar+0xa5e>
		case 'O':
			SF_SET;SE_SET;SD_SET;SC_SET;SB_SET;SA_SET;SJ_RESET;SH_RESET;SK_RESET;SL_RESET;SN_RESET;SG_RESET;SG2_RESET;
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	4849      	ldr	r0, [pc, #292]	; (8000bb4 <segchar+0xa68>)
 8000a90:	f000 fe9c 	bl	80017cc <HAL_GPIO_WritePin>
 8000a94:	2201      	movs	r2, #1
 8000a96:	2101      	movs	r1, #1
 8000a98:	4846      	ldr	r0, [pc, #280]	; (8000bb4 <segchar+0xa68>)
 8000a9a:	f000 fe97 	bl	80017cc <HAL_GPIO_WritePin>
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4845      	ldr	r0, [pc, #276]	; (8000bb8 <segchar+0xa6c>)
 8000aa4:	f000 fe92 	bl	80017cc <HAL_GPIO_WritePin>
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aae:	4842      	ldr	r0, [pc, #264]	; (8000bb8 <segchar+0xa6c>)
 8000ab0:	f000 fe8c 	bl	80017cc <HAL_GPIO_WritePin>
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	483e      	ldr	r0, [pc, #248]	; (8000bb4 <segchar+0xa68>)
 8000aba:	f000 fe87 	bl	80017cc <HAL_GPIO_WritePin>
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	483c      	ldr	r0, [pc, #240]	; (8000bb4 <segchar+0xa68>)
 8000ac4:	f000 fe82 	bl	80017cc <HAL_GPIO_WritePin>
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2120      	movs	r1, #32
 8000acc:	4839      	ldr	r0, [pc, #228]	; (8000bb4 <segchar+0xa68>)
 8000ace:	f000 fe7d 	bl	80017cc <HAL_GPIO_WritePin>
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4837      	ldr	r0, [pc, #220]	; (8000bb4 <segchar+0xa68>)
 8000ad8:	f000 fe78 	bl	80017cc <HAL_GPIO_WritePin>
 8000adc:	2200      	movs	r2, #0
 8000ade:	2110      	movs	r1, #16
 8000ae0:	4834      	ldr	r0, [pc, #208]	; (8000bb4 <segchar+0xa68>)
 8000ae2:	f000 fe73 	bl	80017cc <HAL_GPIO_WritePin>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	4833      	ldr	r0, [pc, #204]	; (8000bbc <segchar+0xa70>)
 8000aee:	f000 fe6d 	bl	80017cc <HAL_GPIO_WritePin>
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4830      	ldr	r0, [pc, #192]	; (8000bbc <segchar+0xa70>)
 8000afa:	f000 fe67 	bl	80017cc <HAL_GPIO_WritePin>
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	482c      	ldr	r0, [pc, #176]	; (8000bb4 <segchar+0xa68>)
 8000b04:	f000 fe62 	bl	80017cc <HAL_GPIO_WritePin>
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	482a      	ldr	r0, [pc, #168]	; (8000bb8 <segchar+0xa6c>)
 8000b0e:	f000 fe5d 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000b12:	e04a      	b.n	8000baa <segchar+0xa5e>
		case 'Z':
			SF_RESET;SE_RESET;SD_RESET;SC_RESET;SB_RESET;SM_SET;SJ_SET;SA_RESET;SH_SET;SK_SET;SL_SET;SN_SET;SG_RESET;SG2_RESET;
 8000b14:	2200      	movs	r2, #0
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <segchar+0xa68>)
 8000b1a:	f000 fe57 	bl	80017cc <HAL_GPIO_WritePin>
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2101      	movs	r1, #1
 8000b22:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <segchar+0xa68>)
 8000b24:	f000 fe52 	bl	80017cc <HAL_GPIO_WritePin>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <segchar+0xa6c>)
 8000b2e:	f000 fe4d 	bl	80017cc <HAL_GPIO_WritePin>
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <segchar+0xa6c>)
 8000b3a:	f000 fe47 	bl	80017cc <HAL_GPIO_WritePin>
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2102      	movs	r1, #2
 8000b42:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <segchar+0xa68>)
 8000b44:	f000 fe42 	bl	80017cc <HAL_GPIO_WritePin>
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	481b      	ldr	r0, [pc, #108]	; (8000bbc <segchar+0xa70>)
 8000b50:	f000 fe3c 	bl	80017cc <HAL_GPIO_WritePin>
 8000b54:	2201      	movs	r2, #1
 8000b56:	2120      	movs	r1, #32
 8000b58:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <segchar+0xa68>)
 8000b5a:	f000 fe37 	bl	80017cc <HAL_GPIO_WritePin>
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2104      	movs	r1, #4
 8000b62:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <segchar+0xa68>)
 8000b64:	f000 fe32 	bl	80017cc <HAL_GPIO_WritePin>
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <segchar+0xa68>)
 8000b6e:	f000 fe2d 	bl	80017cc <HAL_GPIO_WritePin>
 8000b72:	2201      	movs	r2, #1
 8000b74:	2110      	movs	r1, #16
 8000b76:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <segchar+0xa68>)
 8000b78:	f000 fe28 	bl	80017cc <HAL_GPIO_WritePin>
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b82:	480e      	ldr	r0, [pc, #56]	; (8000bbc <segchar+0xa70>)
 8000b84:	f000 fe22 	bl	80017cc <HAL_GPIO_WritePin>
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <segchar+0xa70>)
 8000b90:	f000 fe1c 	bl	80017cc <HAL_GPIO_WritePin>
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <segchar+0xa68>)
 8000b9a:	f000 fe17 	bl	80017cc <HAL_GPIO_WritePin>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <segchar+0xa6c>)
 8000ba4:	f000 fe12 	bl	80017cc <HAL_GPIO_WritePin>
			break;
 8000ba8:	bf00      	nop
	}
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40011000 	.word	0x40011000

08000bc0 <pound>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pound(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	R1 ='A';
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <pound+0x24>)
 8000bc6:	2241      	movs	r2, #65	; 0x41
 8000bc8:	701a      	strb	r2, [r3, #0]
	R2 ='H';
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <pound+0x28>)
 8000bcc:	2248      	movs	r2, #72	; 0x48
 8000bce:	701a      	strb	r2, [r3, #0]
	R3 ='A';
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <pound+0x2c>)
 8000bd2:	2241      	movs	r2, #65	; 0x41
 8000bd4:	701a      	strb	r2, [r3, #0]
	R4 ='P';
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <pound+0x30>)
 8000bd8:	2250      	movs	r2, #80	; 0x50
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000028 	.word	0x20000028
 8000be8:	20000029 	.word	0x20000029
 8000bec:	2000002a 	.word	0x2000002a
 8000bf0:	2000002b 	.word	0x2000002b

08000bf4 <pound2>:

void pound2(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	R1 ='A';
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <pound2+0x24>)
 8000bfa:	2241      	movs	r2, #65	; 0x41
 8000bfc:	701a      	strb	r2, [r3, #0]
	R2 ='P';
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <pound2+0x28>)
 8000c00:	2250      	movs	r2, #80	; 0x50
 8000c02:	701a      	strb	r2, [r3, #0]
	R3 ='O';
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <pound2+0x2c>)
 8000c06:	224f      	movs	r2, #79	; 0x4f
 8000c08:	701a      	strb	r2, [r3, #0]
	R4 ='Z';
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <pound2+0x30>)
 8000c0c:	225a      	movs	r2, #90	; 0x5a
 8000c0e:	701a      	strb	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000028 	.word	0x20000028
 8000c1c:	20000029 	.word	0x20000029
 8000c20:	2000002a 	.word	0x2000002a
 8000c24:	2000002b 	.word	0x2000002b

08000c28 <digits>:

void digits(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	R1 = 1 ;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <digits+0x24>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
	R2 = 2 ;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <digits+0x28>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	701a      	strb	r2, [r3, #0]
	R3 = 3 ;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <digits+0x2c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
	R4 = 4 ;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <digits+0x30>)
 8000c40:	2204      	movs	r2, #4
 8000c42:	701a      	strb	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000028 	.word	0x20000028
 8000c50:	20000029 	.word	0x20000029
 8000c54:	2000002a 	.word	0x2000002a
 8000c58:	2000002b 	.word	0x2000002b

08000c5c <digits2>:
void digits2(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	R1 = 5 ;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <digits2+0x24>)
 8000c62:	2205      	movs	r2, #5
 8000c64:	701a      	strb	r2, [r3, #0]
	R2 = 6 ;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <digits2+0x28>)
 8000c68:	2206      	movs	r2, #6
 8000c6a:	701a      	strb	r2, [r3, #0]
	R3 = 7 ;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <digits2+0x2c>)
 8000c6e:	2207      	movs	r2, #7
 8000c70:	701a      	strb	r2, [r3, #0]
	R4 = 8 ;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <digits2+0x30>)
 8000c74:	2208      	movs	r2, #8
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000028 	.word	0x20000028
 8000c84:	20000029 	.word	0x20000029
 8000c88:	2000002a 	.word	0x2000002a
 8000c8c:	2000002b 	.word	0x2000002b

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c94:	f000 fa82 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c98:	f000 f822 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9c:	f000 f8bc 	bl	8000e18 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ca0:	f000 f864 	bl	8000d6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <main+0x4c>)
 8000ca6:	f001 f991 	bl	8001fcc <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  pound();
 8000caa:	f7ff ff89 	bl	8000bc0 <pound>
	  HAL_Delay(4000);
 8000cae:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000cb2:	f000 fad5 	bl	8001260 <HAL_Delay>
      digits();
 8000cb6:	f7ff ffb7 	bl	8000c28 <digits>
	  HAL_Delay(4000);
 8000cba:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000cbe:	f000 facf 	bl	8001260 <HAL_Delay>
	  pound2();
 8000cc2:	f7ff ff97 	bl	8000bf4 <pound2>
	  HAL_Delay(4000);
 8000cc6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000cca:	f000 fac9 	bl	8001260 <HAL_Delay>
      digits2();
 8000cce:	f7ff ffc5 	bl	8000c5c <digits2>
	  HAL_Delay(4000);
 8000cd2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000cd6:	f000 fac3 	bl	8001260 <HAL_Delay>
	  pound();
 8000cda:	e7e6      	b.n	8000caa <main+0x1a>
 8000cdc:	2000002c 	.word	0x2000002c

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b090      	sub	sp, #64	; 0x40
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fe1a 	bl	8002928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fd67 	bl	80017fc <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d34:	f000 f8f6 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	230f      	movs	r3, #15
 8000d3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2102      	movs	r1, #2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 ffd4 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d5e:	f000 f8e1 	bl	8000f24 <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3740      	adds	r7, #64	; 0x40
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <MX_TIM3_Init+0xa8>)
 8000d92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3599;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000d96:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000da4:	2264      	movs	r2, #100	; 0x64
 8000da6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000db4:	4816      	ldr	r0, [pc, #88]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000db6:	f001 f95b 	bl	8002070 <HAL_TIM_OC_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000dc0:	f000 f8b0 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480f      	ldr	r0, [pc, #60]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000dd4:	f001 fd14 	bl	8002800 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000dde:	f000 f8a1 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_TIM3_Init+0xa4>)
 8000dfa:	f001 fa91 	bl	8002320 <HAL_TIM_OC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e04:	f000 f88e 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000002c 	.word	0x2000002c
 8000e14:	40000400 	.word	0x40000400

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a2c      	ldr	r2, [pc, #176]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a26      	ldr	r2, [pc, #152]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <MX_GPIO_Init+0xfc>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, n_Pin|m_Pin|l_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e92:	4821      	ldr	r0, [pc, #132]	; (8000f18 <MX_GPIO_Init+0x100>)
 8000e94:	f000 fc9a 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, e_Pin|b_Pin|a_Pin|g1_Pin
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f240 21ff 	movw	r1, #767	; 0x2ff
 8000e9e:	481f      	ldr	r0, [pc, #124]	; (8000f1c <MX_GPIO_Init+0x104>)
 8000ea0:	f000 fc94 	bl	80017cc <HAL_GPIO_WritePin>
                          |k_Pin|j_Pin|h_Pin|f_Pin
                          |S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, g2_Pin|d_Pin|c_Pin|T_Pin
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f64d 4103 	movw	r1, #56323	; 0xdc03
 8000eaa:	481d      	ldr	r0, [pc, #116]	; (8000f20 <MX_GPIO_Init+0x108>)
 8000eac:	f000 fc8e 	bl	80017cc <HAL_GPIO_WritePin>
                          |S1_Pin|S2_Pin|S4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : n_Pin m_Pin l_Pin */
  GPIO_InitStruct.Pin = n_Pin|m_Pin|l_Pin;
 8000eb0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_GPIO_Init+0x100>)
 8000eca:	f000 fafb 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : e_Pin b_Pin a_Pin g1_Pin
                           k_Pin j_Pin h_Pin f_Pin
                           S3_Pin */
  GPIO_InitStruct.Pin = e_Pin|b_Pin|a_Pin|g1_Pin
 8000ece:	f240 23ff 	movw	r3, #767	; 0x2ff
 8000ed2:	613b      	str	r3, [r7, #16]
                          |k_Pin|j_Pin|h_Pin|f_Pin
                          |S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_GPIO_Init+0x104>)
 8000ee8:	f000 faec 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : g2_Pin d_Pin c_Pin T_Pin
                           S1_Pin S2_Pin S4_Pin */
  GPIO_InitStruct.Pin = g2_Pin|d_Pin|c_Pin|T_Pin
 8000eec:	f64d 4303 	movw	r3, #56323	; 0xdc03
 8000ef0:	613b      	str	r3, [r7, #16]
                          |S1_Pin|S2_Pin|S4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_GPIO_Init+0x108>)
 8000f06:	f000 fadd 	bl	80014c4 <HAL_GPIO_Init>

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_MspInit+0x60>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_MspInit+0x60>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_TIM_OC_MspInit+0x44>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d113      	bne.n	8000fce <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_TIM_OC_MspInit+0x48>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_TIM_OC_MspInit+0x48>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_OC_MspInit+0x48>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f000 fa47 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc8:	201d      	movs	r0, #29
 8000fca:	f000 fa60 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f8ff 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001034:	483b      	ldr	r0, [pc, #236]	; (8001124 <TIM3_IRQHandler+0xf4>)
 8001036:	f001 f86a 	bl	800210e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(n_count==0)
 800103a:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <TIM3_IRQHandler+0xf8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <TIM3_IRQHandler+0x40>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4838      	ldr	r0, [pc, #224]	; (800112c <TIM3_IRQHandler+0xfc>)
 800104a:	f000 fbbf 	bl	80017cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14|GPIO_PIN_15,GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001054:	4835      	ldr	r0, [pc, #212]	; (800112c <TIM3_IRQHandler+0xfc>)
 8001056:	f000 fbb9 	bl	80017cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001060:	4833      	ldr	r0, [pc, #204]	; (8001130 <TIM3_IRQHandler+0x100>)
 8001062:	f000 fbb3 	bl	80017cc <HAL_GPIO_WritePin>
		segchar(R1);
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <TIM3_IRQHandler+0x104>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f86e 	bl	800014c <segchar>
	}
	if(n_count==1)
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <TIM3_IRQHandler+0xf8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d116      	bne.n	80010a6 <TIM3_IRQHandler+0x76>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107e:	482b      	ldr	r0, [pc, #172]	; (800112c <TIM3_IRQHandler+0xfc>)
 8001080:	f000 fba4 	bl	80017cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12|GPIO_PIN_15,GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800108a:	4828      	ldr	r0, [pc, #160]	; (800112c <TIM3_IRQHandler+0xfc>)
 800108c:	f000 fb9e 	bl	80017cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001096:	4826      	ldr	r0, [pc, #152]	; (8001130 <TIM3_IRQHandler+0x100>)
 8001098:	f000 fb98 	bl	80017cc <HAL_GPIO_WritePin>
		segchar(R2);
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <TIM3_IRQHandler+0x108>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f853 	bl	800014c <segchar>
	}
	if(n_count==2)
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <TIM3_IRQHandler+0xf8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d110      	bne.n	80010d0 <TIM3_IRQHandler+0xa0>
	{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <TIM3_IRQHandler+0x100>)
 80010b6:	f000 fb89 	bl	80017cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12,GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <TIM3_IRQHandler+0xfc>)
 80010c2:	f000 fb83 	bl	80017cc <HAL_GPIO_WritePin>
		segchar(R3);
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <TIM3_IRQHandler+0x10c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f83e 	bl	800014c <segchar>
	}
	if(n_count==3)
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <TIM3_IRQHandler+0xf8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d116      	bne.n	8001106 <TIM3_IRQHandler+0xd6>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010de:	4813      	ldr	r0, [pc, #76]	; (800112c <TIM3_IRQHandler+0xfc>)
 80010e0:	f000 fb74 	bl	80017cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12|GPIO_PIN_14,GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <TIM3_IRQHandler+0xfc>)
 80010ec:	f000 fb6e 	bl	80017cc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <TIM3_IRQHandler+0x100>)
 80010f8:	f000 fb68 	bl	80017cc <HAL_GPIO_WritePin>
		segchar(R4);
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <TIM3_IRQHandler+0x110>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f823 	bl	800014c <segchar>
	}
	n_count++;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <TIM3_IRQHandler+0xf8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <TIM3_IRQHandler+0xf8>)
 8001110:	701a      	strb	r2, [r3, #0]
	if(n_count>3) n_count=0;
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <TIM3_IRQHandler+0xf8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d902      	bls.n	8001120 <TIM3_IRQHandler+0xf0>
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <TIM3_IRQHandler+0xf8>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000002c 	.word	0x2000002c
 8001128:	20000074 	.word	0x20000074
 800112c:	40010c00 	.word	0x40010c00
 8001130:	40010800 	.word	0x40010800
 8001134:	20000028 	.word	0x20000028
 8001138:	20000029 	.word	0x20000029
 800113c:	2000002a 	.word	0x2000002a
 8001140:	2000002b 	.word	0x2000002b

08001144 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001176:	f7ff ffe5 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f001 fbb1 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7ff fd87 	bl	8000c90 <main>
  bx lr
 8001182:	4770      	bx	lr
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800118c:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 8001190:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001194:	2000007c 	.word	0x2000007c

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x28>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x28>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f947 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff feba 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f95f 	bl	80014aa <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f927 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x1c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x20>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x20>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000008 	.word	0x20000008
 8001248:	20000078 	.word	0x20000078

0800124c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_GetTick+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000078 	.word	0x20000078

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff fff0 	bl	800124c <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffe0 	bl	800124c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <__NVIC_EnableIRQ+0x34>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff90 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff2d 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff42 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff35 	bl	800130c <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	e169      	b.n	80017ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d8:	2201      	movs	r2, #1
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 8158 	bne.w	80017a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4a9a      	ldr	r2, [pc, #616]	; (8001764 <HAL_GPIO_Init+0x2a0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d05e      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001500:	4a98      	ldr	r2, [pc, #608]	; (8001764 <HAL_GPIO_Init+0x2a0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d875      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 8001506:	4a98      	ldr	r2, [pc, #608]	; (8001768 <HAL_GPIO_Init+0x2a4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d058      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 800150c:	4a96      	ldr	r2, [pc, #600]	; (8001768 <HAL_GPIO_Init+0x2a4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d86f      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 8001512:	4a96      	ldr	r2, [pc, #600]	; (800176c <HAL_GPIO_Init+0x2a8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d052      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001518:	4a94      	ldr	r2, [pc, #592]	; (800176c <HAL_GPIO_Init+0x2a8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d869      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 800151e:	4a94      	ldr	r2, [pc, #592]	; (8001770 <HAL_GPIO_Init+0x2ac>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d04c      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001524:	4a92      	ldr	r2, [pc, #584]	; (8001770 <HAL_GPIO_Init+0x2ac>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d863      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 800152a:	4a92      	ldr	r2, [pc, #584]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d046      	beq.n	80015be <HAL_GPIO_Init+0xfa>
 8001530:	4a90      	ldr	r2, [pc, #576]	; (8001774 <HAL_GPIO_Init+0x2b0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d85d      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 8001536:	2b12      	cmp	r3, #18
 8001538:	d82a      	bhi.n	8001590 <HAL_GPIO_Init+0xcc>
 800153a:	2b12      	cmp	r3, #18
 800153c:	d859      	bhi.n	80015f2 <HAL_GPIO_Init+0x12e>
 800153e:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <HAL_GPIO_Init+0x80>)
 8001540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001544:	080015bf 	.word	0x080015bf
 8001548:	08001599 	.word	0x08001599
 800154c:	080015ab 	.word	0x080015ab
 8001550:	080015ed 	.word	0x080015ed
 8001554:	080015f3 	.word	0x080015f3
 8001558:	080015f3 	.word	0x080015f3
 800155c:	080015f3 	.word	0x080015f3
 8001560:	080015f3 	.word	0x080015f3
 8001564:	080015f3 	.word	0x080015f3
 8001568:	080015f3 	.word	0x080015f3
 800156c:	080015f3 	.word	0x080015f3
 8001570:	080015f3 	.word	0x080015f3
 8001574:	080015f3 	.word	0x080015f3
 8001578:	080015f3 	.word	0x080015f3
 800157c:	080015f3 	.word	0x080015f3
 8001580:	080015f3 	.word	0x080015f3
 8001584:	080015f3 	.word	0x080015f3
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015b5 	.word	0x080015b5
 8001590:	4a79      	ldr	r2, [pc, #484]	; (8001778 <HAL_GPIO_Init+0x2b4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001596:	e02c      	b.n	80015f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e029      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	3304      	adds	r3, #4
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e024      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	3308      	adds	r3, #8
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e01f      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	330c      	adds	r3, #12
 80015ba:	623b      	str	r3, [r7, #32]
          break;
 80015bc:	e01a      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c6:	2304      	movs	r3, #4
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e013      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	611a      	str	r2, [r3, #16]
          break;
 80015de:	e009      	b.n	80015f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	615a      	str	r2, [r3, #20]
          break;
 80015ea:	e003      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x130>
          break;
 80015f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2bff      	cmp	r3, #255	; 0xff
 80015f8:	d801      	bhi.n	80015fe <HAL_GPIO_Init+0x13a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	e001      	b.n	8001602 <HAL_GPIO_Init+0x13e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3304      	adds	r3, #4
 8001602:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2bff      	cmp	r3, #255	; 0xff
 8001608:	d802      	bhi.n	8001610 <HAL_GPIO_Init+0x14c>
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x152>
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	3b08      	subs	r3, #8
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	210f      	movs	r1, #15
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	6a39      	ldr	r1, [r7, #32]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	431a      	orrs	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 80b1 	beq.w	80017a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001644:	4b4d      	ldr	r3, [pc, #308]	; (800177c <HAL_GPIO_Init+0x2b8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a4c      	ldr	r2, [pc, #304]	; (800177c <HAL_GPIO_Init+0x2b8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_GPIO_Init+0x2b8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800165c:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_GPIO_Init+0x2bc>)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001668:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_GPIO_Init+0x2c0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d013      	beq.n	80016b0 <HAL_GPIO_Init+0x1ec>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3f      	ldr	r2, [pc, #252]	; (8001788 <HAL_GPIO_Init+0x2c4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1e8>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3e      	ldr	r2, [pc, #248]	; (800178c <HAL_GPIO_Init+0x2c8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1e4>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_GPIO_Init+0x2cc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1e0>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e006      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016a4:	2304      	movs	r3, #4
 80016a6:	e004      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_GPIO_Init+0x1ee>
 80016b0:	2300      	movs	r3, #0
 80016b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b4:	f002 0203 	and.w	r2, r2, #3
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	4093      	lsls	r3, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c2:	492f      	ldr	r1, [pc, #188]	; (8001780 <HAL_GPIO_Init+0x2bc>)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	492c      	ldr	r1, [pc, #176]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4928      	ldr	r1, [pc, #160]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4922      	ldr	r1, [pc, #136]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	491e      	ldr	r1, [pc, #120]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800171c:	4013      	ands	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	4918      	ldr	r1, [pc, #96]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4914      	ldr	r1, [pc, #80]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d021      	beq.n	8001798 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
 8001760:	e021      	b.n	80017a6 <HAL_GPIO_Init+0x2e2>
 8001762:	bf00      	nop
 8001764:	10320000 	.word	0x10320000
 8001768:	10310000 	.word	0x10310000
 800176c:	10220000 	.word	0x10220000
 8001770:	10210000 	.word	0x10210000
 8001774:	10120000 	.word	0x10120000
 8001778:	10110000 	.word	0x10110000
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000
 8001790:	40011400 	.word	0x40011400
 8001794:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_GPIO_Init+0x304>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	43db      	mvns	r3, r3
 80017a0:	4909      	ldr	r1, [pc, #36]	; (80017c8 <HAL_GPIO_Init+0x304>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f ae8e 	bne.w	80014d8 <HAL_GPIO_Init+0x14>
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e8:	e003      	b.n	80017f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e272      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800181c:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b04      	cmp	r3, #4
 8001826:	d00c      	beq.n	8001842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001828:	4b8f      	ldr	r3, [pc, #572]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d112      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
 8001834:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06c      	beq.n	8001928 <HAL_RCC_OscConfig+0x12c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d168      	bne.n	8001928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e24c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x76>
 8001864:	4b80      	ldr	r3, [pc, #512]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x98>
 800187a:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a77      	ldr	r2, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a71      	ldr	r2, [pc, #452]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xd4>
 80018b8:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6a      	ldr	r2, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a67      	ldr	r2, [pc, #412]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fcb8 	bl	800124c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fcb4 	bl	800124c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e200      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe4>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fca4 	bl	800124c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fca0 	bl	800124c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1ec      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x10c>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d063      	beq.n	80019fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1c0      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4939      	ldr	r1, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e03a      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fc59 	bl	800124c <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fc55 	bl	800124c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1a1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4927      	ldr	r1, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fc38 	bl	800124c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff fc34 	bl	800124c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e180      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d03a      	beq.n	8001a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d019      	beq.n	8001a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fc18 	bl	800124c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fc14 	bl	800124c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e160      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f000 faa6 	bl	8001f90 <RCC_Delay>
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fbfe 	bl	800124c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a52:	e00f      	b.n	8001a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fbfa 	bl	800124c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e146      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	42420000 	.word	0x42420000
 8001a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e9      	bne.n	8001a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a6 	beq.w	8001bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a92:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a87      	ldr	r2, [pc, #540]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b85      	ldr	r3, [pc, #532]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7e      	ldr	r2, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fbbb 	bl	800124c <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff fbb7 	bl	800124c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e103      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x4c8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x312>
 8001b00:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	e02d      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x334>
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a66      	ldr	r2, [pc, #408]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	e01c      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d10c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x356>
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a60      	ldr	r2, [pc, #384]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a5d      	ldr	r2, [pc, #372]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e00b      	b.n	8001b6a <HAL_RCC_OscConfig+0x36e>
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a57      	ldr	r2, [pc, #348]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fb6b 	bl	800124c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7ff fb67 	bl	800124c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0b1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ee      	beq.n	8001b7a <HAL_RCC_OscConfig+0x37e>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb55 	bl	800124c <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fb51 	bl	800124c <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e09b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ee      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d105      	bne.n	8001bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8087 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d061      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d146      	bne.n	8001c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fb25 	bl	800124c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff fb21 	bl	800124c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e06d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d108      	bne.n	8001c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a19      	ldr	r1, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	430b      	orrs	r3, r1
 8001c52:	491b      	ldr	r1, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff faf5 	bl	800124c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff faf1 	bl	800124c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e03d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46a>
 8001c84:	e035      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fade 	bl	800124c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff fada 	bl	800124c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e026      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x498>
 8001cb2:	e01e      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e019      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x500>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4965      	ldr	r1, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d040      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e073      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06b      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4936      	ldr	r1, [pc, #216]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff fa2c 	bl	800124c <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff fa28 	bl	800124c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e053      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d210      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f821 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1cc>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f98a 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08002960 	.word	0x08002960
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xac>)
 8001edc:	1d3c      	adds	r4, r7, #4
 8001ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ee4:	f240 2301 	movw	r3, #513	; 0x201
 8001ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x46>
 8001f12:	e02b      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f16:	623b      	str	r3, [r7, #32]
      break;
 8001f18:	e02b      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3328      	adds	r3, #40	; 0x28
 8001f24:	443b      	add	r3, r7
 8001f26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	0c5b      	lsrs	r3, r3, #17
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	3328      	adds	r3, #40	; 0x28
 8001f42:	443b      	add	r3, r7
 8001f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f4e:	fb03 f202 	mul.w	r2, r3, r2
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e004      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	623b      	str	r3, [r7, #32]
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f6e:	623b      	str	r3, [r7, #32]
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	6a3b      	ldr	r3, [r7, #32]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc90      	pop	{r4, r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	08002950 	.word	0x08002950
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <RCC_Delay+0x34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <RCC_Delay+0x38>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fac:	bf00      	nop
  }
  while (Delay --);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <RCC_Delay+0x1c>
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e03a      	b.n	800205a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_TIM_Base_Start_IT+0x98>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00e      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x58>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200e:	d009      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x58>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_TIM_Base_Start_IT+0x9c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x58>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_TIM_Base_Start_IT+0xa0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d010      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002046:	e007      	b.n	8002058 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800

08002070 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e041      	b.n	8002106 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe ff7c 	bl	8000f94 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f000 f9bc 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d122      	bne.n	800216a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d11b      	bne.n	800216a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0202 	mvn.w	r2, #2
 800213a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f94f 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 8002156:	e005      	b.n	8002164 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f942 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f951 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b04      	cmp	r3, #4
 8002176:	d122      	bne.n	80021be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d11b      	bne.n	80021be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f06f 0204 	mvn.w	r2, #4
 800218e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f925 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 80021aa:	e005      	b.n	80021b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f918 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f927 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d122      	bne.n	8002212 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11b      	bne.n	8002212 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f06f 0208 	mvn.w	r2, #8
 80021e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2204      	movs	r2, #4
 80021e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f8fb 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 80021fe:	e005      	b.n	800220c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f8ee 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8fd 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b10      	cmp	r3, #16
 800221e:	d122      	bne.n	8002266 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b10      	cmp	r3, #16
 800222c:	d11b      	bne.n	8002266 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f06f 0210 	mvn.w	r2, #16
 8002236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2208      	movs	r2, #8
 800223c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f8d1 	bl	80023f4 <HAL_TIM_IC_CaptureCallback>
 8002252:	e005      	b.n	8002260 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f8c4 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8d3 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10e      	bne.n	8002292 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f06f 0201 	mvn.w	r2, #1
 800228a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f89f 	bl	80023d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d10e      	bne.n	80022be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b80      	cmp	r3, #128	; 0x80
 80022ac:	d107      	bne.n	80022be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb08 	bl	80028ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d10e      	bne.n	80022ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	d107      	bne.n	80022ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f897 	bl	8002418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d10e      	bne.n	8002316 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b20      	cmp	r3, #32
 8002304:	d107      	bne.n	8002316 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f06f 0220 	mvn.w	r2, #32
 800230e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fad3 	bl	80028bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002336:	2302      	movs	r3, #2
 8002338:	e046      	b.n	80023c8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d839      	bhi.n	80023bc <HAL_TIM_OC_ConfigChannel+0x9c>
 8002348:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <HAL_TIM_OC_ConfigChannel+0x30>)
 800234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234e:	bf00      	nop
 8002350:	08002385 	.word	0x08002385
 8002354:	080023bd 	.word	0x080023bd
 8002358:	080023bd 	.word	0x080023bd
 800235c:	080023bd 	.word	0x080023bd
 8002360:	08002393 	.word	0x08002393
 8002364:	080023bd 	.word	0x080023bd
 8002368:	080023bd 	.word	0x080023bd
 800236c:	080023bd 	.word	0x080023bd
 8002370:	080023a1 	.word	0x080023a1
 8002374:	080023bd 	.word	0x080023bd
 8002378:	080023bd 	.word	0x080023bd
 800237c:	080023bd 	.word	0x080023bd
 8002380:	080023af 	.word	0x080023af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f8b0 	bl	80024f0 <TIM_OC1_SetConfig>
      break;
 8002390:	e015      	b.n	80023be <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f90f 	bl	80025bc <TIM_OC2_SetConfig>
      break;
 800239e:	e00e      	b.n	80023be <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f972 	bl	8002690 <TIM_OC3_SetConfig>
      break;
 80023ac:	e007      	b.n	80023be <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f9d5 	bl	8002764 <TIM_OC4_SetConfig>
      break;
 80023ba:	e000      	b.n	80023be <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80023bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <TIM_Base_SetConfig+0xb8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00b      	beq.n	800245c <TIM_Base_SetConfig+0x30>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d007      	beq.n	800245c <TIM_Base_SetConfig+0x30>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <TIM_Base_SetConfig+0xbc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <TIM_Base_SetConfig+0x30>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a25      	ldr	r2, [pc, #148]	; (80024ec <TIM_Base_SetConfig+0xc0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d108      	bne.n	800246e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <TIM_Base_SetConfig+0xb8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00b      	beq.n	800248e <TIM_Base_SetConfig+0x62>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d007      	beq.n	800248e <TIM_Base_SetConfig+0x62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <TIM_Base_SetConfig+0xbc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d003      	beq.n	800248e <TIM_Base_SetConfig+0x62>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <TIM_Base_SetConfig+0xc0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d108      	bne.n	80024a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <TIM_Base_SetConfig+0xb8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d103      	bne.n	80024d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	615a      	str	r2, [r3, #20]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800

080024f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0201 	bic.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f023 0302 	bic.w	r3, r3, #2
 8002538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <TIM_OC1_SetConfig+0xc8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10c      	bne.n	8002566 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f023 0308 	bic.w	r3, r3, #8
 8002552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <TIM_OC1_SetConfig+0xc8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d111      	bne.n	8002592 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	621a      	str	r2, [r3, #32]
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40012c00 	.word	0x40012c00

080025bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0210 	bic.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f023 0320 	bic.w	r3, r3, #32
 8002606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <TIM_OC2_SetConfig+0xd0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10d      	bne.n	8002638 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002636:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <TIM_OC2_SetConfig+0xd0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d113      	bne.n	8002668 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800264e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	621a      	str	r2, [r3, #32]
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00

08002690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <TIM_OC3_SetConfig+0xd0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10d      	bne.n	800270a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <TIM_OC3_SetConfig+0xd0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d113      	bne.n	800273a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	621a      	str	r2, [r3, #32]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00

08002764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	031b      	lsls	r3, r3, #12
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <TIM_OC4_SetConfig+0x98>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d109      	bne.n	80027d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40012c00 	.word	0x40012c00

08002800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002814:	2302      	movs	r3, #2
 8002816:	e046      	b.n	80028a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00e      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d009      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d004      	beq.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10c      	bne.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	2600      	movs	r6, #0
 80028e4:	4d0c      	ldr	r5, [pc, #48]	; (8002918 <__libc_init_array+0x38>)
 80028e6:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	f000 f822 	bl	8002938 <_init>
 80028f4:	2600      	movs	r6, #0
 80028f6:	4d0a      	ldr	r5, [pc, #40]	; (8002920 <__libc_init_array+0x40>)
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <__libc_init_array+0x44>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002970 	.word	0x08002970
 800291c:	08002970 	.word	0x08002970
 8002920:	08002970 	.word	0x08002970
 8002924:	08002974 	.word	0x08002974

08002928 <memset>:
 8002928:	4603      	mov	r3, r0
 800292a:	4402      	add	r2, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
